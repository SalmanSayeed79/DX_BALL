/*
	author:Salman Sayeed
	last modified: August 8, 2008
*/
# include "iGraphics.h"
#include<math.h>
#include <iostream>
#include<stdio.h>
#include<string>

using namespace std;
//==========================================
//      controls
//==========================================

// a for amp decrease
// A for amp increase
// f for f increase
// F for freq decrease
// q for backscreen
int screen=2;
int lives=3;
int score=0;
int start=0;
bool sound=true;
char score_string[100];
/*
	function iDraw() is called again and again by the system.
*/


int xunit=5;
int yunit=5;

int screen_width=xunit*256;
int screen_height=yunit*144;

typedef struct {
    int x;
    int y;
    int dx;
    int dy;
    int R,G,B;
}Ball;
int ball_radius=10;
Ball ball={575,85,5,5,255,255,255};

typedef struct{
    int width;
    int height;
    int x;
    int y;
    int speed;
}Paddle;

Paddle paddle={30*xunit,5*yunit,500,50,30};

typedef struct{
    int x;
    int y;
    int exist;
    int r;
    int g;
    int b;
}Block;
Block blocks[10][10];
int block_width=100;
int block_height=25;





void changeBall(){
    if(screen==2 && start==1){
        itoa(score*100,score_string,10);
        //BALL MOVEMENT
        ball.x+=ball.dx;
        ball.y+=ball.dy;
        if(ball.x+ball_radius>=screen_width) ball.dx=-1*ball.dx;
        if(ball.y+ball_radius>=screen_height) ball.dy=-1*ball.dy;
        if(ball.x-ball_radius<=0) ball.dx=-1*ball.dx;
        if(ball.y-ball_radius<=0){
            lives--;
            PlaySound("fall.wav",NULL,SND_FILENAME | SND_ASYNC);
            Sleep(1500);
            start=0;
            ball.x=575;
            ball.y=85;
            paddle.x=500;

        }
        //PADDLE COLLISION
        if((ball.x+ball_radius>=paddle.x && ball.x-ball_radius<paddle.x+paddle.width)&&(ball.y-ball_radius==paddle.y+paddle.height)){
            ball.dy=-1*ball.dy;
            PlaySound("music\\boop.wav",NULL,SND_FILENAME | SND_ASYNC);
        }

        //BLOCK COLLISION
        for(int i=1;i<=10;i++){
                for(int j=1;j<=10;j++){
                    if(blocks[i][j].exist==1 && (ball.x>=blocks[i][j].x && ball.x<=blocks[i][j].x+block_width) && (ball.y+ball_radius>=blocks[i][j].y && ball.y-ball_radius<=blocks[i][j].y+block_height)) {
                    blocks[i][j].exist=0;
                    ball.dy=-1*ball.dy;
                    printf("%d\n",++score);
                    if(sound) PlaySound("music\\boop.wav",NULL,SND_FILENAME | SND_ASYNC);

                }

            }
        }
        //Repositioning screen when score is hundred
        if(score == 100) {
            for(int i=1;i<=10;i++){
                for(int j=1;j<=10;j++){
                    blocks[i][j].exist=1;
                }
            }
        }
        //Going to screen 3 when life is 0
        //if(lives==0)

    }

}



//=====================
//  Screen 1
//=====================


void screen1(){
        iClear();
        iShowBMP(0,0,"home.bmp");
        iShowBMP(100,150,"b4.bmp");
        iShowBMP(100,265,"b3.bmp");
        iShowBMP(100,380,"b2.bmp");
        iShowBMP(100,495,"b1.bmp");
        //iText(400,525,"Boring version");


}



//=====================
//  Screen 2
//=====================
void screen2(){
    iClear();
    iShowBMP(0,0,"bg.bmp");
    //showing the score
    iSetColor(74,74,74);
    //
    iText(165,22,score_string,GLUT_BITMAP_TIMES_ROMAN_24);
    iSetColor(255,255,255);
    //show lives
    if(lives==3) {
        iShowBMP(1220,15,"life.bmp");
        iShowBMP(1170,15,"life.bmp");
        iShowBMP(1120,15,"life.bmp");
    }
     if(lives==2) {
        iShowBMP(1170,15,"life.bmp");
        iShowBMP(1120,15,"life.bmp");
    }
     if(lives==1) {
        iShowBMP(1120,15,"life.bmp");
    }
    iFilledCircle(ball.x,ball.y,10);
    iFilledRectangle(paddle.x,paddle.y,paddle.width,paddle.height);
    for(int i=1;i<=10;i++){
        for(int j=1;j<=10;j++){
            if(blocks[i][j].exist) {
            iSetColor(blocks[i][j].r,blocks[i][j].g,blocks[i][j].b);
            iFilledRectangle(blocks[i][j].x,blocks[i][j].y,block_width,block_height);
            iSetColor(255,255,255);
            }
        }

    }

}
//=====================
//  Screen 3
//=====================
void screen3(){
    iClear();
}

//=====================
//  Screen 4
//=====================

void screen4(){
    iClear();
}
//=====================
//  Screen 5
//=====================
//instrunctions page
void screen5(){
    iClear();
    iShowBMP(0,0,"inst.bmp");
}






//=====================
//  Global variables for pong
//=====================

int pong1y=200;
int pong2y=200;
int pongSpeed=30;
int ballx=500;
int bally=500;
int ballAmp=450;
double ballFreq=2*3.1416*500;
int ballSpeed=3;
int ballphase=0;
int ampChange=20;
int score1=0;
int score2=0;
int gameEnded=0;
int winner;





void instructions(){
    iClear();
    iText(100,880,"=========================================INSTRUCTIONS=========================================");
    iText(100,800,"Press 'q' to go to the previous screen");
    iText(100,780,"Press 'x' to quit app");
    iText(100,760,"");
    iText(100,740,"Press '+' to increase the velocity");
    iText(100,720,"Press '-' to decrease the velocity");
    iText(100,700,"Press 'pageUp' to add new waves");
    iText(100,680,"Press 'pageDown' to remove a wave");
    iText(100,660,"Press 'rightArrow' to increase phase by 30deg");
    iText(100,640,"Press 'leftArray' to decrease phase by 30deg");
    iText(100,620,"");
    iText(100,600,"Press 'a' to decrease amplitude");
    iText(100,580,"Press 'A' to increase amplitude");
    iText(100,560,"Press 'f' to increase frequency");
    iText(100,540,"Press 'F' to increase frequency");
    iText(100,520,"Press '1' '2' '3' '4' '5' '6' to show/hide corresponding ball");
    iText(100,500,"Press '0' to show/hide sum curve ball");
    iText(100,480,"");
    iText(100,460,"Press 'S' to show the curve lines");
    iText(100,440,"Press 's' to hide the curve lines");
    iText(100,420,"Press 'p' to pause the ball movement");
    iText(100,400,"Press 'r' to resume the ball movement");

}






void iDraw(){

	//place your drawing codes here

	if(screen==1) screen1();
	if(screen==2) screen2();
    if(screen==3) screen3();
    if(screen==4) screen4();
    if(screen==5) screen5();
    if(screen==6) instructions();

}

/*
	function iMouseMove() is called when the user presses and drags the mouse.
	(mx, my) is the position where the mouse pointer is.
*/
void iMouseMove(int mx, int my)
{
	//place your codes here
}

/*
	function iMouse() is called when the user presses/releases the mouse.
	(mx, my) is the position where the mouse pointer is.
*/
void iMouse(int button, int state, int mx, int my)
{
    if(screen==1&&(mx>=100&&mx<=400)&&(my>=495&&my<=560))  screen=2;
    if(screen==1&&(mx>=100&&mx<=400)&&(my>=380&&my<=445))  screen=2;
    if(screen==1&&(mx>=100&&mx<=400)&&(my>=265&&my<=330))  screen=2;
    if(screen==1&&(mx>=100&&mx<=400)&&(my>=150&&my<=215))  screen=5;

    //==================================
    //  For screen 4
    //==================================


}

/*
	function iKeyboard() is called whenever the user hits a key in keyboard.
	key- holds the ASCII value of the key pressed.
*/
void iKeyboard(unsigned char key)
{
	if(key == 'x')
	{
		//do something with 'x'
		exit(0);
	}
	//======================================
	//  Code for screen 2
	//======================================
    if(screen ==2 && key=='p'){
        iPauseTimer(0);
    }
    if(screen ==2 && key=='P'){
        iResumeTimer(0);
    }
    if(screen ==2 && key=='q'){
        screen=1;
    }




    //======================================
	//  Code for screen 3
	//======================================
    if(screen ==3 && key=='q'){
        screen=1;
    }


	//======================================
	//  Code for screen 4
	//======================================
    if(screen ==4 && key=='q'){
        screen=1;
    }


    //======================================
	//  Code for screen 5
	//======================================
    if(screen ==5 && key=='q'){
        screen=1;
    }

	//======================================
	//  Code for screen change
	//======================================
	if(screen==2 && key=='q') screen=1;
	if(screen==3 && key=='q') screen=1;
	if(screen==6 && key=='q') screen=1;
	//place your codes for other keys here
}

/*
	function iSpecialKeyboard() is called whenver user hits special keys like-
	function keys, home, end, pg up, pg down, arraows etc. you have to use
	appropriate constants to detect them. A list is:
	GLUT_KEY_F1, GLUT_KEY_F2, GLUT_KEY_F3, GLUT_KEY_F4, GLUT_KEY_F5, GLUT_KEY_F6,
	GLUT_KEY_F7, GLUT_KEY_F8, GLUT_KEY_F9, GLUT_KEY_F10, GLUT_KEY_F11, GLUT_KEY_F12,
	GLUT_KEY_LEFT, GLUT_KEY_UP, GLUT_KEY_RIGHT, GLUT_KEY_DOWN, GLUT_KEY_PAGE UP,
	GLUT_KEY_PAGE DOWN, GLUT_KEY_HOME, GLUT_KEY_END, GLUT_KEY_INSERT
*/
void iSpecialKeyboard(unsigned char key)
{

	if(key == GLUT_KEY_END)
	{
		exit(0);
	}
	if(screen==2 && key==GLUT_KEY_RIGHT && paddle.x+paddle.width<=screen_width){
        paddle.x+=paddle.speed;
	}
	if(screen==2 && key==GLUT_KEY_LEFT && paddle.x>=0){
        paddle.x-=paddle.speed;
	}
	if(screen==2 &key==GLUT_KEY_UP){
        start=1;
	}

	//screen 5

}



int main()
{
	//place your own initialization codes here.


	//timer needs to be before initialize
	iSetTimer(1,changeBall);
    int a=0;
    int b=400;
    int red=230;
    int green=134;
    int blue=255;



    for(int i=1;i<=10;i++){
        for(int j=1;j<=10;j++){
            blocks[i][j].x=100+a*(block_width+3);
            blocks[i][j].y=b;
            blocks[i][j].exist=1;
            a++;
            blocks[i][j].r=red;
            blocks[i][j].g=green;
            blocks[i][j].b=blue;
            //defining different colors
            if(j+i==2){
                red=140;
                green=252;
                blue=85;
            }
            if(j+i==4){
                red=85;
                green=252;
                blue=249;
            }
            if(j+i==6){
                red=252;
                green=85;
                blue=107;
            }
            if(j+i==8){
                red=172;
                green=245;
                blue=130;
            }
            if(j+i==10){
                red=255;
                green=0;
                blue=0;
            }
            if(j+i==12){
                red=252;
                green=85;
                blue=107;
            }
            if(j+i==14){
                red=236;
                green=255;
                blue=0;
            }
            if(j+i==16){
                red=14;
                green=225;
                blue=27;
            }
            if(j+i==18){
                red=44;
                green=51;
                blue=132;
            }
            if(j+i==20){
                red=245;
                green=244;
                blue=130;
            }
        }
        a=0;
        b+=(block_height+3);


    }
    //iSetTimer(5,allTimers);

    iShowBMP(0,0,"bg.bmp");
	iInitialize(screen_width, screen_height, "DX BALL");

	//iSetTimer(500,changeBall);
	return 0;
}
